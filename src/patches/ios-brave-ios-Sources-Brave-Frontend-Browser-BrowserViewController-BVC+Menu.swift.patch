diff --git a/ios/brave-ios/Sources/Brave/Frontend/Browser/BrowserViewController/BVC+Menu.swift b/ios/brave-ios/Sources/Brave/Frontend/Browser/BrowserViewController/BVC+Menu.swift
index 64f25218ab55a6a50169d3e127fc4b01ee5c2cdd..f8c9af55e7e952259db0eb5488a2a45aeb4ad884 100644
--- a/ios/brave-ios/Sources/Brave/Frontend/Browser/BrowserViewController/BVC+Menu.swift
+++ b/ios/brave-ios/Sources/Brave/Frontend/Browser/BrowserViewController/BVC+Menu.swift
@@ -6,7 +6,6 @@
 import BraveCore
 import BraveShared
 import BraveUI
-import BraveVPN
 import BraveWallet
 import BrowserMenu
 import Data
@@ -20,59 +19,7 @@ import os.log
 extension BrowserViewController {
   func featuresMenuSection(_ menuController: MenuViewController) -> some View {
     VStack(alignment: .leading, spacing: 5) {
-      VPNMenuButton(
-        retryStateActive: Preferences.VPN.vpnReceiptStatus.value
-          == BraveVPN.ReceiptResponse.Status.retryPeriod.rawValue,
-        vpnProductInfo: self.vpnProductInfo,
-        displayVPNDestination: { [unowned self] vc in
-          self.dismiss(animated: true) {
-            self.present(UINavigationController(rootViewController: vc), animated: true)
-          }
-        },
-        enableInstalledVPN: { [unowned menuController] in
-          // Donate Enable VPN Activity for suggestions
-          let enableVPNActivity = ActivityShortcutManager.shared.createShortcutActivity(
-            type: .enableBraveVPN
-          )
-          menuController.userActivity = enableVPNActivity
-          enableVPNActivity.becomeCurrent()
-        },
-        displayAlert: { [unowned menuController] alert in
-          menuController.present(alert, animated: true)
-        },
-        openURL: { [weak self] url in
-          guard let self = self else { return }
-
-          popToBVC()
-
-          self.openURLInNewTab(
-            url,
-            isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
-            isPrivileged: false
-          )
-        },
-        installVPNProfile: { [unowned self] in
-          self.popToBVC(isAnimated: true) {
-            self.present(BraveVPNInstallViewController(), animated: true)
-          }
-        }
-      )
-
-      // Region Button is populated without current selected detail title for features menu
-      RegionMenuButton(
-        settingTitleEnabled: false,
-        regionSelectAction: { [unowned menuController] in
-          let vpnRegionListView = BraveVPNRegionListView(
-            onServerRegionSet: { _ in
-              self.presentVPNServerRegionPopup()
-            }
-          )
-          let vc = UIHostingController(rootView: vpnRegionListView)
-          vc.title = Strings.VPN.vpnRegionListServerScreenTitle
-
-          menuController.pushInnerMenu(vc)
-        }
-      )
+      // VPN and Leo buttons removed
     }
   }
 
@@ -84,58 +31,6 @@ extension BrowserViewController {
         .padding(.horizontal, 14)
         .padding(.bottom, 5)
 
-      VPNMenuButton(
-        retryStateActive: Preferences.VPN.vpnReceiptStatus.value
-          == BraveVPN.ReceiptResponse.Status.retryPeriod.rawValue,
-        vpnProductInfo: self.vpnProductInfo,
-        description: Strings.OptionsMenu.braveVPNItemDescription,
-        displayVPNDestination: { [unowned self] vc in
-          self.dismiss(animated: true) {
-            self.present(UINavigationController(rootViewController: vc), animated: true)
-          }
-        },
-        enableInstalledVPN: { [unowned menuController] in
-          // Donate Enable VPN Activity for suggestions
-          let enableVPNActivity = ActivityShortcutManager.shared.createShortcutActivity(
-            type: .enableBraveVPN
-          )
-          menuController.userActivity = enableVPNActivity
-          enableVPNActivity.becomeCurrent()
-        },
-        displayAlert: { [unowned self] alert in
-          self.popToBVC()
-          self.present(alert, animated: true)
-        },
-        openURL: { [unowned self] url in
-          self.popToBVC()
-          self.openURLInNewTab(
-            url,
-            isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
-            isPrivileged: false
-          )
-        },
-        installVPNProfile: { [unowned self] in
-          self.popToBVC(isAnimated: true) {
-            self.present(BraveVPNInstallViewController(), animated: true)
-          }
-        }
-      )
-
-      // Region Button is populated including the details for privacy feature menu
-      RegionMenuButton(
-        regionSelectAction: { [unowned menuController] in
-          let vpnRegionListView = BraveVPNRegionListView(
-            onServerRegionSet: { _ in
-              self.presentVPNServerRegionPopup()
-            }
-          )
-          let vc = UIHostingController(rootView: vpnRegionListView)
-          vc.title = Strings.VPN.vpnRegionListServerScreenTitle
-
-          menuController.pushInnerMenu(vc)
-        }
-      )
-
       Divider()
 
       MenuItemFactory.button(
@@ -174,14 +69,6 @@ extension BrowserViewController {
       { [unowned self] in
         self.presentWallet()
       }
-
-      // Add Brave-Leo options only in normal browsing
-      if !privateBrowsingManager.isPrivateBrowsing && FeatureList.kAIChat.enabled {
-        MenuItemFactory.button(for: .leo) { [unowned self] in
-          self.popToBVC()
-          self.openBraveLeo()
-        }
-      }
     }
     .fixedSize(horizontal: false, vertical: true)
     .padding(.top, 10)
@@ -340,6 +227,7 @@ extension BrowserViewController {
   }
 
   // Present a popup when VPN server region has been changed
+  /*
   private func presentVPNServerRegionPopup() {
     let controller = PopupViewController(
       rootView: BraveVPNRegionConfirmationView(
@@ -358,6 +246,7 @@ extension BrowserViewController {
       controller?.dismiss(animated: true)
     }
   }
+  */
 
   struct PageActionsMenuSection: View {
     var browserViewController: BrowserViewController
@@ -402,6 +291,7 @@ extension BrowserViewController {
           }
 
           // Add Brave-Leo options only in normal browsing
+          /*
           if !browserViewController.tabManager.privateBrowsingManager.isPrivateBrowsing
             && FeatureList.kAIChat.enabled
           {
@@ -413,6 +303,7 @@ extension BrowserViewController {
               browserViewController.openBraveLeo()
             }
           }
+          */
 
           MenuItemButton(
             icon: Image(braveSystemName: "leo.share.macos"),
@@ -498,7 +389,6 @@ extension BrowserViewController {
     webView: WKWebView?
   ) {
     var actions: [Action] = []
-    actions.append(vpnMenuAction)
     actions.append(contentsOf: destinationMenuActions(for: pageURL))
     actions.append(contentsOf: pageActions(for: pageURL, webView: webView))
     var pageActivities: Set<Action> = Set(
@@ -556,18 +446,8 @@ extension BrowserViewController {
           self.dismiss(animated: true) {
             self.presentSettingsNavigation(with: vc)
           }
-        case .vpnRegionPicker:
-          let vc = UIHostingController(
-            rootView: BraveVPNRegionListView(
-              onServerRegionSet: { _ in
-                self.presentVPNServerRegionPopup()
-              }
-            )
-          )
-          vc.title = Strings.VPN.vpnRegionListServerScreenTitle
-          self.dismiss(animated: true) {
-            self.presentSettingsNavigation(with: vc)
-          }
+        default:
+          break
         }
       }
     )
@@ -668,109 +548,6 @@ extension BrowserViewController {
     return actions
   }
 
-  private var vpnMenuAction: Action {
-    func alertForExpiredState() -> UIAlertController? {
-      if !BraveSkusManager.keepShowingSessionExpiredState {
-        return nil
-      }
-      return BraveSkusManager.sessionExpiredStateAlert(loginCallback: { _ in
-        self.openURLInNewTab(
-          .brave.account,
-          isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
-          isPrivileged: false
-        )
-      })
-    }
-
-    let vpnState = BraveVPN.vpnState
-    switch vpnState {
-    case .notPurchased, .expired:
-      return .init(id: .vpn) { @MainActor [unowned self] _ in
-        if !BraveVPNProductInfo.isComplete {
-          // Reattempt to connect to the App Store to get VPN prices.
-          vpnProductInfo.load()
-          return .none
-        }
-
-        if let alert = alertForExpiredState() {
-          self.dismiss(animated: true) {
-            self.present(alert, animated: true)
-          }
-          return .none
-        }
-
-        // Expired Subcriptions can cause glitch because of connect on demand
-        // Disconnect VPN before showing Purchase
-        BraveVPN.disconnect(skipChecks: true)
-        guard BraveVPN.vpnState.isPaywallEnabled else { return .none }
-
-        let vpnPaywallView = BraveVPNPaywallView(
-          openVPNAuthenticationInNewTab: { [weak self] in
-            guard let self else { return }
-
-            self.popToBVC()
-
-            self.openURLInNewTab(
-              .brave.braveVPNRefreshCredentials,
-              isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
-              isPrivileged: false
-            )
-          },
-          installVPNProfile: { [weak self] in
-            guard let self else { return }
-            self.popToBVC()
-            self.openInsideSettingsNavigation(with: BraveVPNInstallViewController())
-          }
-        )
-
-        let vc = BraveVPNPaywallHostingController(paywallView: vpnPaywallView)
-        let container = UINavigationController(rootViewController: vc)
-        self.dismiss(animated: true) {
-          self.present(container, animated: true)
-        }
-        return .none
-      }
-    case .purchased:
-      let isConnected = BraveVPN.isConnected || BraveVPN.isConnecting
-      return .init(
-        id: .vpn,
-        title: isConnected ? Strings.VPN.vpnOnMenuButtonTitle : Strings.VPN.vpnOffMenuButtonTitle,
-        state: isConnected
-      ) { @MainActor [unowned self] _ in
-        if let alert = alertForExpiredState() {
-          self.dismiss(animated: true) {
-            self.present(alert, animated: true)
-          }
-          return .none
-        }
-
-        if BraveVPN.isConnected || BraveVPN.isConnecting {
-          await withCheckedContinuation { continuation in
-            BraveVPN.disconnect { error in
-              continuation.resume()
-            }
-          }
-        } else {
-          await withCheckedContinuation { continuation in
-            BraveVPN.reconnect { success in
-              continuation.resume()
-            }
-          }
-          // FIXME: VPN activity donation
-          // Donate Enable VPN Activity for suggestions
-          // let enableVPNActivity = ActivityShortcutManager.shared.createShortcutActivity(
-          //   type: .enableBraveVPN
-          // )
-          // Does this need to be attached to the menu specifically?
-          // browserMenuController.userActivity = enableVPNActivity
-          // enableVPNActivity.becomeCurrent()
-        }
-        try? await Task.sleep(for: .milliseconds(100))
-        return .updateAction(vpnMenuAction)
-      }
-    }
-  }
-
   private func destinationMenuActions(for pageURL: URL?) -> [Action] {
     let isPrivateBrowsing = privateBrowsingManager.isPrivateBrowsing
     return [
@@ -828,15 +605,6 @@ extension BrowserViewController {
         }
         return .none
       },
-      .init(
-        id: .braveLeo,
-        attributes: isPrivateBrowsing ? .disabled : []
-      ) { @MainActor [unowned self] _ in
-        self.dismiss(animated: true) {
-          self.openBraveLeo()
-        }
-        return .none
-      },
       .init(id: .playlist) { @MainActor [unowned self] _ in
         self.dismiss(animated: true) {
           self.presentPlaylistController()
@@ -865,20 +633,6 @@ extension BrowserViewController {
         }
         return .none
       },
-      .init(id: .braveTalk) { @MainActor [unowned self] _ in
-        self.dismiss(animated: true) {
-          guard let url = URL(string: "https://talk.brave.com/") else { return }
-          self.popToBVC()
-          if pageURL == nil {
-            // Already on NTP
-            self.finishEditingAndSubmit(url)
-          } else {
-            self.openURLInNewTab(url, isPrivileged: false)
-          }
-        }
-        return .none
-      },
     ]
   }
-
 }
