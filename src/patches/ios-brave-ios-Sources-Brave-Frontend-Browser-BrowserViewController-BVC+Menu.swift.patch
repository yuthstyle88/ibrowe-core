diff --git a/ios/brave-ios/Sources/Brave/Frontend/Browser/BrowserViewController/BVC+Menu.swift b/ios/brave-ios/Sources/Brave/Frontend/Browser/BrowserViewController/BVC+Menu.swift
index d62c5e8a529a671fdc6ade485d25ea9a8e91143b..7551f3e48bcd824a67d54199ecdf8b04df60f350 100644
--- a/ios/brave-ios/Sources/Brave/Frontend/Browser/BrowserViewController/BVC+Menu.swift
+++ b/ios/brave-ios/Sources/Brave/Frontend/Browser/BrowserViewController/BVC+Menu.swift
@@ -164,7 +164,7 @@ extension BrowserViewController {
           }
         }
         MenuItemFactory.button(for: .talk) {
-          guard let url = URL(string: "https://talk.brave.com/") else { return }
+          guard let url = URL(string: "https://talk.ibrowe.com/") else { return }
 
           self.popToBVC()
           self.finishEditingAndSubmit(url)
@@ -510,7 +510,7 @@ extension BrowserViewController {
     pageURL: URL?
   ) {
     var actions: [Action] = []
-    actions.append(vpnMenuAction)
+//    actions.append(vpnMenuAction)
     actions.append(contentsOf: destinationMenuActions(for: pageURL))
     actions.append(contentsOf: pageActions(for: pageURL, tab: tab))
     var pageActivities: Set<Action> = Set(
@@ -690,118 +690,118 @@ extension BrowserViewController {
     return actions
   }
 
-  private var vpnMenuAction: Action {
-    func alertForExpiredState() -> UIAlertController? {
-      if !BraveSkusManager.keepShowingSessionExpiredState {
-        return nil
-      }
-      return BraveSkusManager.sessionExpiredStateAlert(loginCallback: { _ in
-        self.openURLInNewTab(
-          .brave.account,
-          isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
-          isPrivileged: false
-        )
-      })
-    }
-
-    let vpnState = BraveVPN.vpnState
-    switch vpnState {
-    case .notPurchased, .expired:
-      return .init(id: .vpn) { @MainActor [unowned self] _ in
-        if !BraveVPNProductInfo.isComplete {
-          // Reattempt to connect to the App Store to get VPN prices.
-          vpnProductInfo.load()
-          return .none
-        }
-
-        if let alert = alertForExpiredState() {
-          self.dismiss(animated: true) {
-            self.present(alert, animated: true)
-          }
-          return .none
-        }
-
-        // Expired Subcriptions can cause glitch because of connect on demand
-        // Disconnect VPN before showing Purchase
-        BraveVPN.disconnect(skipChecks: true)
-        guard BraveVPN.vpnState.isPaywallEnabled else { return .none }
-
-        let vpnPaywallView = BraveVPNPaywallView(
-          openVPNAuthenticationInNewTab: { [weak self] in
-            guard let self else { return }
-
-            self.popToBVC()
-
-            self.openURLInNewTab(
-              .brave.braveVPNRefreshCredentials,
-              isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
-              isPrivileged: false
-            )
-          },
-          openDirectCheckoutInNewTab: { [weak self] in
-            guard let self else { return }
-
-            popToBVC()
-            openURLInNewTab(
-              .brave.braveVPNCheckoutURL,
-              isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
-              isPrivileged: false
-            )
-          },
-          installVPNProfile: { [weak self] in
-            guard let self else { return }
-            self.popToBVC()
-            self.openInsideSettingsNavigation(with: BraveVPNInstallViewController())
-          }
-        )
-
-        let vc = BraveVPNPaywallHostingController(paywallView: vpnPaywallView)
-        let container = UINavigationController(rootViewController: vc)
-        self.dismiss(animated: true) {
-          self.present(container, animated: true)
-        }
-        return .none
-      }
-    case .purchased:
-      let isConnected = BraveVPN.isConnected || BraveVPN.isConnecting
-      return .init(
-        id: .vpn,
-        title: isConnected ? Strings.VPN.vpnOnMenuButtonTitle : Strings.VPN.vpnOffMenuButtonTitle,
-        state: isConnected
-      ) { @MainActor [unowned self] _ in
-        if let alert = alertForExpiredState() {
-          self.dismiss(animated: true) {
-            self.present(alert, animated: true)
-          }
-          return .none
-        }
-
-        if BraveVPN.isConnected || BraveVPN.isConnecting {
-          await withCheckedContinuation { continuation in
-            BraveVPN.disconnect { error in
-              continuation.resume()
-            }
-          }
-        } else {
-          await withCheckedContinuation { continuation in
-            BraveVPN.reconnect { success in
-              continuation.resume()
-            }
-          }
-          // FIXME: VPN activity donation
-          // Donate Enable VPN Activity for suggestions
-          // let enableVPNActivity = ActivityShortcutManager.shared.createShortcutActivity(
-          //   type: .enableBraveVPN
-          // )
-          // Does this need to be attached to the menu specifically?
-          // browserMenuController.userActivity = enableVPNActivity
-          // enableVPNActivity.becomeCurrent()
-        }
-        try? await Task.sleep(for: .milliseconds(100))
-        return .updateAction(vpnMenuAction)
-      }
-    }
-  }
+//  private var vpnMenuAction: Action {
+//    func alertForExpiredState() -> UIAlertController? {
+//      if !BraveSkusManager.keepShowingSessionExpiredState {
+//        return nil
+//      }
+//      return BraveSkusManager.sessionExpiredStateAlert(loginCallback: { _ in
+//        self.openURLInNewTab(
+//          .brave.account,
+//          isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
+//          isPrivileged: false
+//        )
+//      })
+//    }
+//
+//    let vpnState = BraveVPN.vpnState
+//    switch vpnState {
+//    case .notPurchased, .expired:
+//      return .init(id: .vpn) { @MainActor [unowned self] _ in
+//        if !BraveVPNProductInfo.isComplete {
+//          // Reattempt to connect to the App Store to get VPN prices.
+//          vpnProductInfo.load()
+//          return .none
+//        }
+//
+//        if let alert = alertForExpiredState() {
+//          self.dismiss(animated: true) {
+//            self.present(alert, animated: true)
+//          }
+//          return .none
+//        }
+//
+//        // Expired Subcriptions can cause glitch because of connect on demand
+//        // Disconnect VPN before showing Purchase
+//        BraveVPN.disconnect(skipChecks: true)
+//        guard BraveVPN.vpnState.isPaywallEnabled else { return .none }
+//
+//        let vpnPaywallView = BraveVPNPaywallView(
+//          openVPNAuthenticationInNewTab: { [weak self] in
+//            guard let self else { return }
+//
+//            self.popToBVC()
+//
+//            self.openURLInNewTab(
+//              .brave.braveVPNRefreshCredentials,
+//              isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
+//              isPrivileged: false
+//            )
+//          },
+//          openDirectCheckoutInNewTab: { [weak self] in
+//            guard let self else { return }
+//
+//            popToBVC()
+//            openURLInNewTab(
+//              .brave.braveVPNCheckoutURL,
+//              isPrivate: self.privateBrowsingManager.isPrivateBrowsing,
+//              isPrivileged: false
+//            )
+//          },
+//          installVPNProfile: { [weak self] in
+//            guard let self else { return }
+//            self.popToBVC()
+//            self.openInsideSettingsNavigation(with: BraveVPNInstallViewController())
+//          }
+//        )
+//
+//        let vc = BraveVPNPaywallHostingController(paywallView: vpnPaywallView)
+//        let container = UINavigationController(rootViewController: vc)
+//        self.dismiss(animated: true) {
+//          self.present(container, animated: true)
+//        }
+//        return .none
+//      }
+//    case .purchased:
+//      let isConnected = BraveVPN.isConnected || BraveVPN.isConnecting
+//      return .init(
+//        id: .vpn,
+//        title: isConnected ? Strings.VPN.vpnOnMenuButtonTitle : Strings.VPN.vpnOffMenuButtonTitle,
+//        state: isConnected
+//      ) { @MainActor [unowned self] _ in
+//        if let alert = alertForExpiredState() {
+//          self.dismiss(animated: true) {
+//            self.present(alert, animated: true)
+//          }
+//          return .none
+//        }
+//
+//        if BraveVPN.isConnected || BraveVPN.isConnecting {
+//          await withCheckedContinuation { continuation in
+//            BraveVPN.disconnect { error in
+//              continuation.resume()
+//            }
+//          }
+//        } else {
+//          await withCheckedContinuation { continuation in
+//            BraveVPN.reconnect { success in
+//              continuation.resume()
+//            }
+//          }
+//          // FIXME: VPN activity donation
+//          // Donate Enable VPN Activity for suggestions
+//          // let enableVPNActivity = ActivityShortcutManager.shared.createShortcutActivity(
+//          //   type: .enableBraveVPN
+//          // )
+//          // Does this need to be attached to the menu specifically?
+//          // browserMenuController.userActivity = enableVPNActivity
+//          // enableVPNActivity.becomeCurrent()
+//        }
+//        try? await Task.sleep(for: .milliseconds(100))
+//        return .updateAction(vpnMenuAction)
+//      }
+//    }
+//  }
 
   private func destinationMenuActions(for pageURL: URL?) -> [Action] {
     let isPrivateBrowsing = privateBrowsingManager.isPrivateBrowsing
@@ -851,15 +851,15 @@ extension BrowserViewController {
         self.presentWallet()
         return .none
       },
-      .init(
-        id: .braveLeo,
-        attributes: isPrivateBrowsing ? .disabled : []
-      ) { @MainActor [unowned self] _ in
-        self.dismiss(animated: true) {
-          self.openBraveLeo()
-        }
-        return .none
-      },
+//      .init(
+//        id: .braveLeo,
+//        attributes: isPrivateBrowsing ? .disabled : []
+//      ) { @MainActor [unowned self] _ in
+//        self.dismiss(animated: true) {
+//          self.openBraveLeo()
+//        }
+//        return .none
+//      },
       .init(id: .playlist) { @MainActor [unowned self] _ in
         // presentPlaylistController already handles dismiss + present
         self.presentPlaylistController()
@@ -887,19 +887,19 @@ extension BrowserViewController {
         }
         return .none
       },
-      .init(id: .braveTalk) { @MainActor [unowned self] _ in
-        self.dismiss(animated: true) {
-          guard let url = URL(string: "https://talk.brave.com/") else { return }
-          self.popToBVC()
-          if pageURL == nil {
-            // Already on NTP
-            self.finishEditingAndSubmit(url)
-          } else {
-            self.openURLInNewTab(url, isPrivileged: false)
-          }
-        }
-        return .none
-      },
+//      .init(id: .braveTalk) { @MainActor [unowned self] _ in
+//        self.dismiss(animated: true) {
+//          guard let url = URL(string: "https://talk.ibrowe.com/") else { return }
+//          self.popToBVC()
+//          if pageURL == nil {
+//            // Already on NTP
+//            self.finishEditingAndSubmit(url)
+//          } else {
+//            self.openURLInNewTab(url, isPrivileged: false)
+//          }
+//        }
+//        return .none
+//      },
     ]
   }
 
