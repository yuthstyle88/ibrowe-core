diff --git a/browser/ui/webui/settings/brave_settings_leo_assistant_handler.cc b/browser/ui/webui/settings/brave_settings_leo_assistant_handler.cc
index 772fdd0b05aeae7189d96990bc53c2eccc9d6984..55070c87bc62f6e34270097c71f9cf324310c23f 100644
--- a/browser/ui/webui/settings/brave_settings_leo_assistant_handler.cc
+++ b/browser/ui/webui/settings/brave_settings_leo_assistant_handler.cc
@@ -23,38 +23,38 @@
 
 namespace {
 
-const std::vector<sidebar::SidebarItem>::const_iterator FindAiChatSidebarItem(
-    const std::vector<sidebar::SidebarItem>& items) {
-  return std::ranges::find_if(items, [](const auto& item) {
-    return item.built_in_item_type ==
-           sidebar::SidebarItem::BuiltInItemType::kChatUI;
-  });
-}
-
-bool ShowLeoAssistantIconVisibleIfNot(
-    sidebar::SidebarService* sidebar_service) {
-  const auto hidden_items = sidebar_service->GetHiddenDefaultSidebarItems();
-  const auto item_hidden_iter = FindAiChatSidebarItem(hidden_items);
-
-  if (item_hidden_iter != hidden_items.end()) {
-    sidebar_service->AddItem(*item_hidden_iter);
-    return true;
-  }
-
-  return false;
-}
-
-bool HideLeoAssistantIconIfNot(sidebar::SidebarService* sidebar_service) {
-  const auto visible_items = sidebar_service->items();
-  const auto item_visible_iter = FindAiChatSidebarItem(visible_items);
-
-  if (item_visible_iter != visible_items.end()) {
-    sidebar_service->RemoveItemAt(item_visible_iter - visible_items.begin());
-    return true;
-  }
-
-  return false;
-}
+// const std::vector<sidebar::SidebarItem>::const_iterator FindAiChatSidebarItem(
+//     const std::vector<sidebar::SidebarItem>& items) {
+//   return std::ranges::find_if(items, [](const auto& item) {
+//     return item.built_in_item_type ==
+//            sidebar::SidebarItem::BuiltInItemType::kChatUI;
+//   });
+// }
+//
+// bool ShowLeoAssistantIconVisibleIfNot(
+//     sidebar::SidebarService* sidebar_service) {
+//   const auto hidden_items = sidebar_service->GetHiddenDefaultSidebarItems();
+//   // const auto item_hidden_iter = FindAiChatSidebarItem(hidden_items);
+//
+//   if (item_hidden_iter != hidden_items.end()) {
+//     sidebar_service->AddItem(*item_hidden_iter);
+//     return true;
+//   }
+//
+//   return false;
+// }
+
+// bool HideLeoAssistantIconIfNot(sidebar::SidebarService* sidebar_service) {
+//   const auto visible_items = sidebar_service->items();
+//   const auto item_visible_iter = FindAiChatSidebarItem(visible_items);
+//
+//   if (item_visible_iter != visible_items.end()) {
+//     sidebar_service->RemoveItemAt(item_visible_iter - visible_items.begin());
+//     return true;
+//   }
+//
+//   return false;
+// }
 
 }  // namespace
 
@@ -98,18 +98,18 @@ void BraveLeoAssistantHandler::OnJavascriptDisallowed() {
 
 void BraveLeoAssistantHandler::OnItemAdded(const sidebar::SidebarItem& item,
                                            size_t index) {
-  if (item.built_in_item_type ==
-      sidebar::SidebarItem::BuiltInItemType::kChatUI) {
-    NotifyChatUiChanged(true);
-  }
+  // if (item.built_in_item_type ==
+  //     sidebar::SidebarItem::BuiltInItemType::kChatUI) {
+  //   NotifyChatUiChanged(true);
+  // }
 }
 
 void BraveLeoAssistantHandler::OnItemRemoved(const sidebar::SidebarItem& item,
                                              size_t index) {
-  if (item.built_in_item_type ==
-      sidebar::SidebarItem::BuiltInItemType::kChatUI) {
-    NotifyChatUiChanged(false);
-  }
+  // if (item.built_in_item_type ==
+  //     sidebar::SidebarItem::BuiltInItemType::kChatUI) {
+  //   NotifyChatUiChanged(false);
+  // }
 }
 
 void BraveLeoAssistantHandler::NotifyChatUiChanged(const bool& is_leo_visible) {
@@ -121,12 +121,12 @@ void BraveLeoAssistantHandler::NotifyChatUiChanged(const bool& is_leo_visible) {
 
 void BraveLeoAssistantHandler::HandleToggleLeoIcon(
     const base::Value::List& args) {
-  auto* service = sidebar::SidebarServiceFactory::GetForProfile(profile_);
+  // auto* service = sidebar::SidebarServiceFactory::GetForProfile(profile_);
 
   AllowJavascript();
-  if (!ShowLeoAssistantIconVisibleIfNot(service)) {
-    HideLeoAssistantIconIfNot(service);
-  }
+  // if (!ShowLeoAssistantIconVisibleIfNot(service)) {
+  //   HideLeoAssistantIconIfNot(service);
+  // }
 }
 
 void BraveLeoAssistantHandler::HandleValidateModelEndpoint(
@@ -163,18 +163,18 @@ void BraveLeoAssistantHandler::HandleGetLeoIconVisibility(
   auto* service = sidebar::SidebarServiceFactory::GetForProfile(profile_);
   const auto hidden_items = service->GetHiddenDefaultSidebarItems();
   AllowJavascript();
-  ResolveJavascriptCallback(
-      args[0], !base::Contains(hidden_items,
-                               sidebar::SidebarItem::BuiltInItemType::kChatUI,
-                               &sidebar::SidebarItem::built_in_item_type));
+  // ResolveJavascriptCallback(
+  //     args[0], !base::Contains(hidden_items,
+  //                              sidebar::SidebarItem::BuiltInItemType::kChatUI,
+  //                              &sidebar::SidebarItem::built_in_item_type));
 }
 
 void BraveLeoAssistantHandler::HandleResetLeoData(
     const base::Value::List& args) {
-  auto* sidebar_service =
-      sidebar::SidebarServiceFactory::GetForProfile(profile_);
+  // auto* sidebar_service =
+  //     sidebar::SidebarServiceFactory::GetForProfile(profile_);
 
-  ShowLeoAssistantIconVisibleIfNot(sidebar_service);
+  // ShowLeoAssistantIconVisibleIfNot(sidebar_service);
 
   ai_chat::AIChatService* service =
       ai_chat::AIChatServiceFactory::GetForBrowserContext(profile_);
