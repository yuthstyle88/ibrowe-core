diff --git a/components/sidebar/browser/sidebar_service.cc b/components/sidebar/browser/sidebar_service.cc
index 15e90513813410d5e576f64e170e50f23e743b52..3af1ba23046d78e7577486ae8c2aea1a63c12ad2 100644
--- a/components/sidebar/browser/sidebar_service.cc
+++ b/components/sidebar/browser/sidebar_service.cc
@@ -51,10 +51,10 @@ SidebarItem::BuiltInItemType GetBuiltInItemTypeForLegacyURL(
   // A previous version of prefs used the URL even for built-in items, and not
   // the |SidebarItem::BuiltInItemType|. Therefore, this list should not
   // need to be updated.
-  if (url == "https://together.brave.com/" ||
-      url == "https://talk.brave.com/") {
-    return SidebarItem::BuiltInItemType::kBraveTalk;
-  }
+  // if (url == "https://together.ibrowe.com/" ||
+  //     url == "https://talk.ibrowe.com/") {
+  //   return SidebarItem::BuiltInItemType::kBraveTalk;
+  // }
 
   if (url == "chrome://wallet/") {
     return SidebarItem::BuiltInItemType::kWallet;
@@ -154,8 +154,8 @@ void SidebarService::MigratePrefSidebarBuiltInItemsToHidden() {
   }
   // Only include items that were known prior to this migration
   std::vector<SidebarItem> built_in_items_to_hide;
-  built_in_items_to_hide.push_back(
-      GetBuiltInItemForType(SidebarItem::BuiltInItemType::kBraveTalk));
+  // built_in_items_to_hide.push_back(
+  //     GetBuiltInItemForType(SidebarItem::BuiltInItemType::kBraveTalk));
   built_in_items_to_hide.push_back(
       GetBuiltInItemForType(SidebarItem::BuiltInItemType::kWallet));
   built_in_items_to_hide.push_back(
@@ -446,7 +446,7 @@ std::optional<SidebarItem> SidebarService::GetDefaultPanelItem() const {
   // Use this order for picking active panel when panel is opened as
   // we don't cache previous active panel.
   constexpr SidebarItem::BuiltInItemType kPreferredPanelOrder[] = {
-      SidebarItem::BuiltInItemType::kChatUI,
+     // SidebarItem::BuiltInItemType::kChatUI,
       SidebarItem::BuiltInItemType::kReadingList,
       SidebarItem::BuiltInItemType::kBookmarks,
       SidebarItem::BuiltInItemType::kPlaylist};
@@ -593,16 +593,16 @@ std::vector<SidebarItem> SidebarService::GetDefaultSidebarItems() const {
 SidebarItem SidebarService::GetBuiltInItemForType(
     SidebarItem::BuiltInItemType type) const {
   switch (type) {
-    case SidebarItem::BuiltInItemType::kBraveTalk:
-      if (!prefs_->GetBoolean(kBraveTalkDisabledByPolicy)) {
-        return SidebarItem::Create(
-            GURL(kBraveTalkURL),
-            l10n_util::GetStringUTF16(IDS_SIDEBAR_BRAVE_TALK_ITEM_TITLE),
-            SidebarItem::Type::kTypeBuiltIn,
-            SidebarItem::BuiltInItemType::kBraveTalk,
-            /* open_in_panel = */ false);
-      }
-      return SidebarItem();
+    // case SidebarItem::BuiltInItemType::kBraveTalk:
+    //   if (!prefs_->GetBoolean(kBraveTalkDisabledByPolicy)) {
+    //     return SidebarItem::Create(
+    //         GURL(kBraveTalkURL),
+    //         l10n_util::GetStringUTF16(IDS_SIDEBAR_BRAVE_TALK_ITEM_TITLE),
+    //         SidebarItem::Type::kTypeBuiltIn,
+    //         SidebarItem::BuiltInItemType::kBraveTalk,
+    //         /* open_in_panel = */ false);
+    //   }
+    //   return SidebarItem();
     case SidebarItem::BuiltInItemType::kWallet: {
       if (brave_wallet::IsAllowed(prefs_)) {
         return SidebarItem::Create(
@@ -654,16 +654,17 @@ SidebarItem SidebarService::GetBuiltInItemForType(
 
       return SidebarItem();
     }
+      /*
     case SidebarItem::BuiltInItemType::kChatUI: {
       if (ai_chat::IsAIChatEnabled(prefs_)) {
         return SidebarItem::Create(l10n_util::GetStringUTF16(IDS_CHAT_UI_TITLE),
                                    SidebarItem::Type::kTypeBuiltIn,
                                    SidebarItem::BuiltInItemType::kChatUI,
-                                   /* open_in_panel = */ true);
+                                    open_in_panel =  true);
       } else {
         return SidebarItem();
       }
-    }
+    } */
     case SidebarItem::BuiltInItemType::kNone:
       break;
   }
