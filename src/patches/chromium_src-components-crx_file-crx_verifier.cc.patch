diff --git a/chromium_src/components/crx_file/crx_verifier.cc b/chromium_src/components/crx_file/crx_verifier.cc
index 9ff355a555c21c4786818f369cc15e0135080475..80871e8b86a2f97218f3ac84c1b31923aceae10b 100644
--- a/chromium_src/components/crx_file/crx_verifier.cc
+++ b/chromium_src/components/crx_file/crx_verifier.cc
@@ -20,18 +20,28 @@ namespace {
 // then, they are also signed with this new key. Now, the value here ensures
 // that only binaries signed with the new key are accepted.
 constexpr uint8_t kBravePublisherKeyHash[] = {
-    0xb8, 0xb9, 0xd3, 0x85, 0xd5, 0x1d, 0x37, 0x9d, 0x92, 0x56, 0xa0,
-    0xf0, 0xa7, 0xf5, 0x1b, 0xb0, 0x8e, 0x3e, 0xb5, 0x64, 0xab, 0x85,
-    0xbd, 0x19, 0xd6, 0xff, 0x49, 0xa7, 0x35, 0x19, 0x84, 0xf7};
+  0xb8, 0xb9, 0xd3, 0x85, 0xd5, 0x1d, 0x37, 0x9d, 0x92, 0x56, 0xa0,
+  0xf0, 0xa7, 0xf5, 0x1b, 0xb0, 0x8e, 0x3e, 0xb5, 0x64, 0xab, 0x85,
+  0xbd, 0x19, 0xd6, 0xff, 0x49, 0xa7, 0x35, 0x19, 0x84, 0xf7};
+
+constexpr uint8_t kiBrowePublisherKeyHash[] = {
+  0xd9, 0x62, 0x0c, 0xa0, 0x0b, 0x26, 0x70, 0x18, 0xb5, 0xc9, 0x69, 0x8b,
+  0x05, 0xa4, 0x1f, 0x41, 0xc9, 0x07, 0x6b, 0x74, 0x0e, 0x20, 0x9f, 0x31,
+  0x1f, 0x59, 0xdf, 0x71, 0xa4, 0x37, 0xc4, 0x7d};
 
 auto GetBravePublisherKeyHash() {
   static auto brave_publisher_key = std::to_array(kBravePublisherKeyHash);
   return base::span(brave_publisher_key);
 }
 
+auto GetiBrowePublisherKeyHash() {
+  static auto ibrowe_publisher_key = std::to_array(kiBrowePublisherKeyHash);
+  return base::span(ibrowe_publisher_key);
+}
+
 // Used in the patch in crx_verifier.cc.
 bool IsBravePublisher(base::span<const uint8_t> key_hash) {
-  return GetBravePublisherKeyHash() == key_hash;
+  return GetBravePublisherKeyHash() == key_hash || GetiBrowePublisherKeyHash() == key_hash;
 }
 
 }  // namespace
